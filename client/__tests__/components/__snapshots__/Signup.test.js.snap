// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`signup renders signup correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Signup />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <form>
        <WithStyles(Grid)>
          <div>
            <WithStyles(FormControl)
              required={true}
            >
              <WithStyles(InputLabel)
                className="first-name"
                htmlFor="signup-first-name"
              >
                First Name
              </WithStyles(InputLabel)>
              <WithStyles(Input)
                className="first-name"
                id="signup-first-name"
                onChange={[Function]}
                placeholder="First Name"
                type="text"
              />
            </WithStyles(FormControl)>
          </div>
          <div>
            <WithStyles(FormControl)
              required={true}
            >
              <WithStyles(InputLabel)
                className="last-name"
                htmlFor="signup-last-name"
              >
                Last Name
              </WithStyles(InputLabel)>
              <WithStyles(Input)
                className="last-name"
                id="signup-last-name"
                onChange={[Function]}
                placeholder="Last Name"
                type="text"
              />
            </WithStyles(FormControl)>
          </div>
          <div>
            <WithStyles(FormControl)
              required={true}
            >
              <WithStyles(InputLabel)
                className="zipcode"
                htmlFor="signup-zipcode"
              >
                Zipcode
              </WithStyles(InputLabel)>
              <WithStyles(Input)
                className="zipcode"
                id="signup-zipcode"
                onChange={[Function]}
                placeholder="Zipcode"
                type="text"
              />
            </WithStyles(FormControl)>
          </div>
          <div>
            <WithStyles(FormControl)
              required={true}
            >
              <WithStyles(InputLabel)
                className="email-address"
                htmlFor="signup-email-address"
              >
                Email
              </WithStyles(InputLabel)>
              <WithStyles(Input)
                className="email-address"
                id="signup-email-address"
                onChange={[Function]}
                placeholder="drone@globex.com"
                startAdornment={
                  <WithStyles(InputAdornment)
                    position="start"
                  >
                    <pure(EmailIcon) />
                  </WithStyles(InputAdornment)>
                }
                type="email"
              />
            </WithStyles(FormControl)>
          </div>
          <div>
            <WithStyles(FormControl)
              required={true}
            >
              <WithStyles(InputLabel)
                className="password"
                htmlFor="signup-password"
              >
                Password
              </WithStyles(InputLabel)>
              <WithStyles(Input)
                className="password"
                endAdornment={
                  <WithStyles(InputAdornment)
                    position="end"
                  >
                    <WithStyles(IconButton)
                      aria-label="Toggle password visibility"
                      onMouseDown={[Function]}
                    >
                      <pure(VisibilityIcon) />
                    </WithStyles(IconButton)>
                  </WithStyles(InputAdornment)>
                }
                id="signup-password"
                onChange={[Function]}
                startAdornment={
                  <WithStyles(InputAdornment)
                    position="start"
                  >
                    <pure(VpnKeyIcon) />
                  </WithStyles(InputAdornment)>
                }
                type="password"
              />
            </WithStyles(FormControl)>
          </div>
        </WithStyles(Grid)>
        <WithStyles(Grid)>
          <WithStyles(Button)
            className="create-new-account submit-form"
            color="primary"
            onClick={[Function]}
            variant="contained"
          >
            Create Newer Account
            <WithStyles(Icon)>
              <pure(AccountBoxIcon) />
            </WithStyles(Icon)>
          </WithStyles(Button)>
        </WithStyles(Grid)>
      </form>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <WithStyles(Grid)>
            <div>
              <WithStyles(FormControl)
                required={true}
              >
                <WithStyles(InputLabel)
                  className="first-name"
                  htmlFor="signup-first-name"
                >
                  First Name
                </WithStyles(InputLabel)>
                <WithStyles(Input)
                  className="first-name"
                  id="signup-first-name"
                  onChange={[Function]}
                  placeholder="First Name"
                  type="text"
                />
              </WithStyles(FormControl)>
            </div>
            <div>
              <WithStyles(FormControl)
                required={true}
              >
                <WithStyles(InputLabel)
                  className="last-name"
                  htmlFor="signup-last-name"
                >
                  Last Name
                </WithStyles(InputLabel)>
                <WithStyles(Input)
                  className="last-name"
                  id="signup-last-name"
                  onChange={[Function]}
                  placeholder="Last Name"
                  type="text"
                />
              </WithStyles(FormControl)>
            </div>
            <div>
              <WithStyles(FormControl)
                required={true}
              >
                <WithStyles(InputLabel)
                  className="zipcode"
                  htmlFor="signup-zipcode"
                >
                  Zipcode
                </WithStyles(InputLabel)>
                <WithStyles(Input)
                  className="zipcode"
                  id="signup-zipcode"
                  onChange={[Function]}
                  placeholder="Zipcode"
                  type="text"
                />
              </WithStyles(FormControl)>
            </div>
            <div>
              <WithStyles(FormControl)
                required={true}
              >
                <WithStyles(InputLabel)
                  className="email-address"
                  htmlFor="signup-email-address"
                >
                  Email
                </WithStyles(InputLabel)>
                <WithStyles(Input)
                  className="email-address"
                  id="signup-email-address"
                  onChange={[Function]}
                  placeholder="drone@globex.com"
                  startAdornment={
                    <WithStyles(InputAdornment)
                      position="start"
                    >
                      <pure(EmailIcon) />
                    </WithStyles(InputAdornment)>
                  }
                  type="email"
                />
              </WithStyles(FormControl)>
            </div>
            <div>
              <WithStyles(FormControl)
                required={true}
              >
                <WithStyles(InputLabel)
                  className="password"
                  htmlFor="signup-password"
                >
                  Password
                </WithStyles(InputLabel)>
                <WithStyles(Input)
                  className="password"
                  endAdornment={
                    <WithStyles(InputAdornment)
                      position="end"
                    >
                      <WithStyles(IconButton)
                        aria-label="Toggle password visibility"
                        onMouseDown={[Function]}
                      >
                        <pure(VisibilityIcon) />
                      </WithStyles(IconButton)>
                    </WithStyles(InputAdornment)>
                  }
                  id="signup-password"
                  onChange={[Function]}
                  startAdornment={
                    <WithStyles(InputAdornment)
                      position="start"
                    >
                      <pure(VpnKeyIcon) />
                    </WithStyles(InputAdornment)>
                  }
                  type="password"
                />
              </WithStyles(FormControl)>
            </div>
          </WithStyles(Grid)>,
          <WithStyles(Grid)>
            <WithStyles(Button)
              className="create-new-account submit-form"
              color="primary"
              onClick={[Function]}
              variant="contained"
            >
              Create Newer Account
              <WithStyles(Icon)>
                <pure(AccountBoxIcon) />
              </WithStyles(Icon)>
            </WithStyles(Button)>
          </WithStyles(Grid)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <div>
                <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="first-name"
                    htmlFor="signup-first-name"
                  >
                    First Name
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="first-name"
                    id="signup-first-name"
                    onChange={[Function]}
                    placeholder="First Name"
                    type="text"
                  />
                </WithStyles(FormControl)>
              </div>,
              <div>
                <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="last-name"
                    htmlFor="signup-last-name"
                  >
                    Last Name
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="last-name"
                    id="signup-last-name"
                    onChange={[Function]}
                    placeholder="Last Name"
                    type="text"
                  />
                </WithStyles(FormControl)>
              </div>,
              <div>
                <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="zipcode"
                    htmlFor="signup-zipcode"
                  >
                    Zipcode
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="zipcode"
                    id="signup-zipcode"
                    onChange={[Function]}
                    placeholder="Zipcode"
                    type="text"
                  />
                </WithStyles(FormControl)>
              </div>,
              <div>
                <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="email-address"
                    htmlFor="signup-email-address"
                  >
                    Email
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="email-address"
                    id="signup-email-address"
                    onChange={[Function]}
                    placeholder="drone@globex.com"
                    startAdornment={
                      <WithStyles(InputAdornment)
                        position="start"
                      >
                        <pure(EmailIcon) />
                      </WithStyles(InputAdornment)>
                    }
                    type="email"
                  />
                </WithStyles(FormControl)>
              </div>,
              <div>
                <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="password"
                    htmlFor="signup-password"
                  >
                    Password
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="password"
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Toggle password visibility"
                          onMouseDown={[Function]}
                        >
                          <pure(VisibilityIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="signup-password"
                    onChange={[Function]}
                    startAdornment={
                      <WithStyles(InputAdornment)
                        position="start"
                      >
                        <pure(VpnKeyIcon) />
                      </WithStyles(InputAdornment)>
                    }
                    type="password"
                  />
                </WithStyles(FormControl)>
              </div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="first-name"
                    htmlFor="signup-first-name"
                  >
                    First Name
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="first-name"
                    id="signup-first-name"
                    onChange={[Function]}
                    placeholder="First Name"
                    type="text"
                  />
                </WithStyles(FormControl)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <WithStyles(InputLabel)
                      className="first-name"
                      htmlFor="signup-first-name"
                    >
                      First Name
                    </WithStyles(InputLabel)>,
                    <WithStyles(Input)
                      className="first-name"
                      id="signup-first-name"
                      onChange={[Function]}
                      placeholder="First Name"
                      type="text"
                    />,
                  ],
                  "required": true,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "First Name",
                      "className": "first-name",
                      "htmlFor": "signup-first-name",
                    },
                    "ref": null,
                    "rendered": "First Name",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "className": "first-name",
                      "id": "signup-first-name",
                      "onChange": [Function],
                      "placeholder": "First Name",
                      "type": "text",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="last-name"
                    htmlFor="signup-last-name"
                  >
                    Last Name
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="last-name"
                    id="signup-last-name"
                    onChange={[Function]}
                    placeholder="Last Name"
                    type="text"
                  />
                </WithStyles(FormControl)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <WithStyles(InputLabel)
                      className="last-name"
                      htmlFor="signup-last-name"
                    >
                      Last Name
                    </WithStyles(InputLabel)>,
                    <WithStyles(Input)
                      className="last-name"
                      id="signup-last-name"
                      onChange={[Function]}
                      placeholder="Last Name"
                      type="text"
                    />,
                  ],
                  "required": true,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Last Name",
                      "className": "last-name",
                      "htmlFor": "signup-last-name",
                    },
                    "ref": null,
                    "rendered": "Last Name",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "className": "last-name",
                      "id": "signup-last-name",
                      "onChange": [Function],
                      "placeholder": "Last Name",
                      "type": "text",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="zipcode"
                    htmlFor="signup-zipcode"
                  >
                    Zipcode
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="zipcode"
                    id="signup-zipcode"
                    onChange={[Function]}
                    placeholder="Zipcode"
                    type="text"
                  />
                </WithStyles(FormControl)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <WithStyles(InputLabel)
                      className="zipcode"
                      htmlFor="signup-zipcode"
                    >
                      Zipcode
                    </WithStyles(InputLabel)>,
                    <WithStyles(Input)
                      className="zipcode"
                      id="signup-zipcode"
                      onChange={[Function]}
                      placeholder="Zipcode"
                      type="text"
                    />,
                  ],
                  "required": true,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Zipcode",
                      "className": "zipcode",
                      "htmlFor": "signup-zipcode",
                    },
                    "ref": null,
                    "rendered": "Zipcode",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "className": "zipcode",
                      "id": "signup-zipcode",
                      "onChange": [Function],
                      "placeholder": "Zipcode",
                      "type": "text",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="email-address"
                    htmlFor="signup-email-address"
                  >
                    Email
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="email-address"
                    id="signup-email-address"
                    onChange={[Function]}
                    placeholder="drone@globex.com"
                    startAdornment={
                      <WithStyles(InputAdornment)
                        position="start"
                      >
                        <pure(EmailIcon) />
                      </WithStyles(InputAdornment)>
                    }
                    type="email"
                  />
                </WithStyles(FormControl)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <WithStyles(InputLabel)
                      className="email-address"
                      htmlFor="signup-email-address"
                    >
                      Email
                    </WithStyles(InputLabel)>,
                    <WithStyles(Input)
                      className="email-address"
                      id="signup-email-address"
                      onChange={[Function]}
                      placeholder="drone@globex.com"
                      startAdornment={
                        <WithStyles(InputAdornment)
                          position="start"
                        >
                          <pure(EmailIcon) />
                        </WithStyles(InputAdornment)>
                      }
                      type="email"
                    />,
                  ],
                  "required": true,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Email",
                      "className": "email-address",
                      "htmlFor": "signup-email-address",
                    },
                    "ref": null,
                    "rendered": "Email",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "className": "email-address",
                      "id": "signup-email-address",
                      "onChange": [Function],
                      "placeholder": "drone@globex.com",
                      "startAdornment": <WithStyles(InputAdornment)
                        position="start"
                      >
                        <pure(EmailIcon) />
                      </WithStyles(InputAdornment)>,
                      "type": "email",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="password"
                    htmlFor="signup-password"
                  >
                    Password
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="password"
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Toggle password visibility"
                          onMouseDown={[Function]}
                        >
                          <pure(VisibilityIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="signup-password"
                    onChange={[Function]}
                    startAdornment={
                      <WithStyles(InputAdornment)
                        position="start"
                      >
                        <pure(VpnKeyIcon) />
                      </WithStyles(InputAdornment)>
                    }
                    type="password"
                  />
                </WithStyles(FormControl)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <WithStyles(InputLabel)
                      className="password"
                      htmlFor="signup-password"
                    >
                      Password
                    </WithStyles(InputLabel)>,
                    <WithStyles(Input)
                      className="password"
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Toggle password visibility"
                            onMouseDown={[Function]}
                          >
                            <pure(VisibilityIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="signup-password"
                      onChange={[Function]}
                      startAdornment={
                        <WithStyles(InputAdornment)
                          position="start"
                        >
                          <pure(VpnKeyIcon) />
                        </WithStyles(InputAdornment)>
                      }
                      type="password"
                    />,
                  ],
                  "required": true,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Password",
                      "className": "password",
                      "htmlFor": "signup-password",
                    },
                    "ref": null,
                    "rendered": "Password",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "className": "password",
                      "endAdornment": <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Toggle password visibility"
                          onMouseDown={[Function]}
                        >
                          <pure(VisibilityIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>,
                      "id": "signup-password",
                      "onChange": [Function],
                      "startAdornment": <WithStyles(InputAdornment)
                        position="start"
                      >
                        <pure(VpnKeyIcon) />
                      </WithStyles(InputAdornment)>,
                      "type": "password",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Button)
              className="create-new-account submit-form"
              color="primary"
              onClick={[Function]}
              variant="contained"
            >
              Create Newer Account
              <WithStyles(Icon)>
                <pure(AccountBoxIcon) />
              </WithStyles(Icon)>
            </WithStyles(Button)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                "Create Newer Account",
                <WithStyles(Icon)>
                  <pure(AccountBoxIcon) />
                </WithStyles(Icon)>,
              ],
              "className": "create-new-account submit-form",
              "color": "primary",
              "onClick": [Function],
              "variant": "contained",
            },
            "ref": null,
            "rendered": Array [
              "Create Newer Account",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <pure(AccountBoxIcon) />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "form",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <form>
          <WithStyles(Grid)>
            <div>
              <WithStyles(FormControl)
                required={true}
              >
                <WithStyles(InputLabel)
                  className="first-name"
                  htmlFor="signup-first-name"
                >
                  First Name
                </WithStyles(InputLabel)>
                <WithStyles(Input)
                  className="first-name"
                  id="signup-first-name"
                  onChange={[Function]}
                  placeholder="First Name"
                  type="text"
                />
              </WithStyles(FormControl)>
            </div>
            <div>
              <WithStyles(FormControl)
                required={true}
              >
                <WithStyles(InputLabel)
                  className="last-name"
                  htmlFor="signup-last-name"
                >
                  Last Name
                </WithStyles(InputLabel)>
                <WithStyles(Input)
                  className="last-name"
                  id="signup-last-name"
                  onChange={[Function]}
                  placeholder="Last Name"
                  type="text"
                />
              </WithStyles(FormControl)>
            </div>
            <div>
              <WithStyles(FormControl)
                required={true}
              >
                <WithStyles(InputLabel)
                  className="zipcode"
                  htmlFor="signup-zipcode"
                >
                  Zipcode
                </WithStyles(InputLabel)>
                <WithStyles(Input)
                  className="zipcode"
                  id="signup-zipcode"
                  onChange={[Function]}
                  placeholder="Zipcode"
                  type="text"
                />
              </WithStyles(FormControl)>
            </div>
            <div>
              <WithStyles(FormControl)
                required={true}
              >
                <WithStyles(InputLabel)
                  className="email-address"
                  htmlFor="signup-email-address"
                >
                  Email
                </WithStyles(InputLabel)>
                <WithStyles(Input)
                  className="email-address"
                  id="signup-email-address"
                  onChange={[Function]}
                  placeholder="drone@globex.com"
                  startAdornment={
                    <WithStyles(InputAdornment)
                      position="start"
                    >
                      <pure(EmailIcon) />
                    </WithStyles(InputAdornment)>
                  }
                  type="email"
                />
              </WithStyles(FormControl)>
            </div>
            <div>
              <WithStyles(FormControl)
                required={true}
              >
                <WithStyles(InputLabel)
                  className="password"
                  htmlFor="signup-password"
                >
                  Password
                </WithStyles(InputLabel)>
                <WithStyles(Input)
                  className="password"
                  endAdornment={
                    <WithStyles(InputAdornment)
                      position="end"
                    >
                      <WithStyles(IconButton)
                        aria-label="Toggle password visibility"
                        onMouseDown={[Function]}
                      >
                        <pure(VisibilityIcon) />
                      </WithStyles(IconButton)>
                    </WithStyles(InputAdornment)>
                  }
                  id="signup-password"
                  onChange={[Function]}
                  startAdornment={
                    <WithStyles(InputAdornment)
                      position="start"
                    >
                      <pure(VpnKeyIcon) />
                    </WithStyles(InputAdornment)>
                  }
                  type="password"
                />
              </WithStyles(FormControl)>
            </div>
          </WithStyles(Grid)>
          <WithStyles(Grid)>
            <WithStyles(Button)
              className="create-new-account submit-form"
              color="primary"
              onClick={[Function]}
              variant="contained"
            >
              Create Newer Account
              <WithStyles(Icon)>
                <pure(AccountBoxIcon) />
              </WithStyles(Icon)>
            </WithStyles(Button)>
          </WithStyles(Grid)>
        </form>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <WithStyles(Grid)>
              <div>
                <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="first-name"
                    htmlFor="signup-first-name"
                  >
                    First Name
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="first-name"
                    id="signup-first-name"
                    onChange={[Function]}
                    placeholder="First Name"
                    type="text"
                  />
                </WithStyles(FormControl)>
              </div>
              <div>
                <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="last-name"
                    htmlFor="signup-last-name"
                  >
                    Last Name
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="last-name"
                    id="signup-last-name"
                    onChange={[Function]}
                    placeholder="Last Name"
                    type="text"
                  />
                </WithStyles(FormControl)>
              </div>
              <div>
                <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="zipcode"
                    htmlFor="signup-zipcode"
                  >
                    Zipcode
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="zipcode"
                    id="signup-zipcode"
                    onChange={[Function]}
                    placeholder="Zipcode"
                    type="text"
                  />
                </WithStyles(FormControl)>
              </div>
              <div>
                <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="email-address"
                    htmlFor="signup-email-address"
                  >
                    Email
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="email-address"
                    id="signup-email-address"
                    onChange={[Function]}
                    placeholder="drone@globex.com"
                    startAdornment={
                      <WithStyles(InputAdornment)
                        position="start"
                      >
                        <pure(EmailIcon) />
                      </WithStyles(InputAdornment)>
                    }
                    type="email"
                  />
                </WithStyles(FormControl)>
              </div>
              <div>
                <WithStyles(FormControl)
                  required={true}
                >
                  <WithStyles(InputLabel)
                    className="password"
                    htmlFor="signup-password"
                  >
                    Password
                  </WithStyles(InputLabel)>
                  <WithStyles(Input)
                    className="password"
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Toggle password visibility"
                          onMouseDown={[Function]}
                        >
                          <pure(VisibilityIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="signup-password"
                    onChange={[Function]}
                    startAdornment={
                      <WithStyles(InputAdornment)
                        position="start"
                      >
                        <pure(VpnKeyIcon) />
                      </WithStyles(InputAdornment)>
                    }
                    type="password"
                  />
                </WithStyles(FormControl)>
              </div>
            </WithStyles(Grid)>,
            <WithStyles(Grid)>
              <WithStyles(Button)
                className="create-new-account submit-form"
                color="primary"
                onClick={[Function]}
                variant="contained"
              >
                Create Newer Account
                <WithStyles(Icon)>
                  <pure(AccountBoxIcon) />
                </WithStyles(Icon)>
              </WithStyles(Button)>
            </WithStyles(Grid)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <div>
                  <WithStyles(FormControl)
                    required={true}
                  >
                    <WithStyles(InputLabel)
                      className="first-name"
                      htmlFor="signup-first-name"
                    >
                      First Name
                    </WithStyles(InputLabel)>
                    <WithStyles(Input)
                      className="first-name"
                      id="signup-first-name"
                      onChange={[Function]}
                      placeholder="First Name"
                      type="text"
                    />
                  </WithStyles(FormControl)>
                </div>,
                <div>
                  <WithStyles(FormControl)
                    required={true}
                  >
                    <WithStyles(InputLabel)
                      className="last-name"
                      htmlFor="signup-last-name"
                    >
                      Last Name
                    </WithStyles(InputLabel)>
                    <WithStyles(Input)
                      className="last-name"
                      id="signup-last-name"
                      onChange={[Function]}
                      placeholder="Last Name"
                      type="text"
                    />
                  </WithStyles(FormControl)>
                </div>,
                <div>
                  <WithStyles(FormControl)
                    required={true}
                  >
                    <WithStyles(InputLabel)
                      className="zipcode"
                      htmlFor="signup-zipcode"
                    >
                      Zipcode
                    </WithStyles(InputLabel)>
                    <WithStyles(Input)
                      className="zipcode"
                      id="signup-zipcode"
                      onChange={[Function]}
                      placeholder="Zipcode"
                      type="text"
                    />
                  </WithStyles(FormControl)>
                </div>,
                <div>
                  <WithStyles(FormControl)
                    required={true}
                  >
                    <WithStyles(InputLabel)
                      className="email-address"
                      htmlFor="signup-email-address"
                    >
                      Email
                    </WithStyles(InputLabel)>
                    <WithStyles(Input)
                      className="email-address"
                      id="signup-email-address"
                      onChange={[Function]}
                      placeholder="drone@globex.com"
                      startAdornment={
                        <WithStyles(InputAdornment)
                          position="start"
                        >
                          <pure(EmailIcon) />
                        </WithStyles(InputAdornment)>
                      }
                      type="email"
                    />
                  </WithStyles(FormControl)>
                </div>,
                <div>
                  <WithStyles(FormControl)
                    required={true}
                  >
                    <WithStyles(InputLabel)
                      className="password"
                      htmlFor="signup-password"
                    >
                      Password
                    </WithStyles(InputLabel)>
                    <WithStyles(Input)
                      className="password"
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Toggle password visibility"
                            onMouseDown={[Function]}
                          >
                            <pure(VisibilityIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="signup-password"
                      onChange={[Function]}
                      startAdornment={
                        <WithStyles(InputAdornment)
                          position="start"
                        >
                          <pure(VpnKeyIcon) />
                        </WithStyles(InputAdornment)>
                      }
                      type="password"
                    />
                  </WithStyles(FormControl)>
                </div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <WithStyles(FormControl)
                    required={true}
                  >
                    <WithStyles(InputLabel)
                      className="first-name"
                      htmlFor="signup-first-name"
                    >
                      First Name
                    </WithStyles(InputLabel)>
                    <WithStyles(Input)
                      className="first-name"
                      id="signup-first-name"
                      onChange={[Function]}
                      placeholder="First Name"
                      type="text"
                    />
                  </WithStyles(FormControl)>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(InputLabel)
                        className="first-name"
                        htmlFor="signup-first-name"
                      >
                        First Name
                      </WithStyles(InputLabel)>,
                      <WithStyles(Input)
                        className="first-name"
                        id="signup-first-name"
                        onChange={[Function]}
                        placeholder="First Name"
                        type="text"
                      />,
                    ],
                    "required": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "First Name",
                        "className": "first-name",
                        "htmlFor": "signup-first-name",
                      },
                      "ref": null,
                      "rendered": "First Name",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "className": "first-name",
                        "id": "signup-first-name",
                        "onChange": [Function],
                        "placeholder": "First Name",
                        "type": "text",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <WithStyles(FormControl)
                    required={true}
                  >
                    <WithStyles(InputLabel)
                      className="last-name"
                      htmlFor="signup-last-name"
                    >
                      Last Name
                    </WithStyles(InputLabel)>
                    <WithStyles(Input)
                      className="last-name"
                      id="signup-last-name"
                      onChange={[Function]}
                      placeholder="Last Name"
                      type="text"
                    />
                  </WithStyles(FormControl)>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(InputLabel)
                        className="last-name"
                        htmlFor="signup-last-name"
                      >
                        Last Name
                      </WithStyles(InputLabel)>,
                      <WithStyles(Input)
                        className="last-name"
                        id="signup-last-name"
                        onChange={[Function]}
                        placeholder="Last Name"
                        type="text"
                      />,
                    ],
                    "required": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Last Name",
                        "className": "last-name",
                        "htmlFor": "signup-last-name",
                      },
                      "ref": null,
                      "rendered": "Last Name",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "className": "last-name",
                        "id": "signup-last-name",
                        "onChange": [Function],
                        "placeholder": "Last Name",
                        "type": "text",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <WithStyles(FormControl)
                    required={true}
                  >
                    <WithStyles(InputLabel)
                      className="zipcode"
                      htmlFor="signup-zipcode"
                    >
                      Zipcode
                    </WithStyles(InputLabel)>
                    <WithStyles(Input)
                      className="zipcode"
                      id="signup-zipcode"
                      onChange={[Function]}
                      placeholder="Zipcode"
                      type="text"
                    />
                  </WithStyles(FormControl)>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(InputLabel)
                        className="zipcode"
                        htmlFor="signup-zipcode"
                      >
                        Zipcode
                      </WithStyles(InputLabel)>,
                      <WithStyles(Input)
                        className="zipcode"
                        id="signup-zipcode"
                        onChange={[Function]}
                        placeholder="Zipcode"
                        type="text"
                      />,
                    ],
                    "required": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Zipcode",
                        "className": "zipcode",
                        "htmlFor": "signup-zipcode",
                      },
                      "ref": null,
                      "rendered": "Zipcode",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "className": "zipcode",
                        "id": "signup-zipcode",
                        "onChange": [Function],
                        "placeholder": "Zipcode",
                        "type": "text",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <WithStyles(FormControl)
                    required={true}
                  >
                    <WithStyles(InputLabel)
                      className="email-address"
                      htmlFor="signup-email-address"
                    >
                      Email
                    </WithStyles(InputLabel)>
                    <WithStyles(Input)
                      className="email-address"
                      id="signup-email-address"
                      onChange={[Function]}
                      placeholder="drone@globex.com"
                      startAdornment={
                        <WithStyles(InputAdornment)
                          position="start"
                        >
                          <pure(EmailIcon) />
                        </WithStyles(InputAdornment)>
                      }
                      type="email"
                    />
                  </WithStyles(FormControl)>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(InputLabel)
                        className="email-address"
                        htmlFor="signup-email-address"
                      >
                        Email
                      </WithStyles(InputLabel)>,
                      <WithStyles(Input)
                        className="email-address"
                        id="signup-email-address"
                        onChange={[Function]}
                        placeholder="drone@globex.com"
                        startAdornment={
                          <WithStyles(InputAdornment)
                            position="start"
                          >
                            <pure(EmailIcon) />
                          </WithStyles(InputAdornment)>
                        }
                        type="email"
                      />,
                    ],
                    "required": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Email",
                        "className": "email-address",
                        "htmlFor": "signup-email-address",
                      },
                      "ref": null,
                      "rendered": "Email",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "className": "email-address",
                        "id": "signup-email-address",
                        "onChange": [Function],
                        "placeholder": "drone@globex.com",
                        "startAdornment": <WithStyles(InputAdornment)
                          position="start"
                        >
                          <pure(EmailIcon) />
                        </WithStyles(InputAdornment)>,
                        "type": "email",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <WithStyles(FormControl)
                    required={true}
                  >
                    <WithStyles(InputLabel)
                      className="password"
                      htmlFor="signup-password"
                    >
                      Password
                    </WithStyles(InputLabel)>
                    <WithStyles(Input)
                      className="password"
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Toggle password visibility"
                            onMouseDown={[Function]}
                          >
                            <pure(VisibilityIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="signup-password"
                      onChange={[Function]}
                      startAdornment={
                        <WithStyles(InputAdornment)
                          position="start"
                        >
                          <pure(VpnKeyIcon) />
                        </WithStyles(InputAdornment)>
                      }
                      type="password"
                    />
                  </WithStyles(FormControl)>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(InputLabel)
                        className="password"
                        htmlFor="signup-password"
                      >
                        Password
                      </WithStyles(InputLabel)>,
                      <WithStyles(Input)
                        className="password"
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Toggle password visibility"
                              onMouseDown={[Function]}
                            >
                              <pure(VisibilityIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="signup-password"
                        onChange={[Function]}
                        startAdornment={
                          <WithStyles(InputAdornment)
                            position="start"
                          >
                            <pure(VpnKeyIcon) />
                          </WithStyles(InputAdornment)>
                        }
                        type="password"
                      />,
                    ],
                    "required": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Password",
                        "className": "password",
                        "htmlFor": "signup-password",
                      },
                      "ref": null,
                      "rendered": "Password",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "className": "password",
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Toggle password visibility"
                            onMouseDown={[Function]}
                          >
                            <pure(VisibilityIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>,
                        "id": "signup-password",
                        "onChange": [Function],
                        "startAdornment": <WithStyles(InputAdornment)
                          position="start"
                        >
                          <pure(VpnKeyIcon) />
                        </WithStyles(InputAdornment)>,
                        "type": "password",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(Button)
                className="create-new-account submit-form"
                color="primary"
                onClick={[Function]}
                variant="contained"
              >
                Create Newer Account
                <WithStyles(Icon)>
                  <pure(AccountBoxIcon) />
                </WithStyles(Icon)>
              </WithStyles(Button)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  "Create Newer Account",
                  <WithStyles(Icon)>
                    <pure(AccountBoxIcon) />
                  </WithStyles(Icon)>,
                ],
                "className": "create-new-account submit-form",
                "color": "primary",
                "onClick": [Function],
                "variant": "contained",
              },
              "ref": null,
              "rendered": Array [
                "Create Newer Account",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <pure(AccountBoxIcon) />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": "form",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
